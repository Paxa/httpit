#!/usr/bin/env ruby

require 'rubygems'
require 'sinatra'
require 'haml'
require 'redcloth'
require "pathname"

GEM_ROOT = Pathname.new(__FILE__).dirname.join("..").expand_path

require GEM_ROOT + "lib/search"

ROOT = Pathname.pwd

# this hack allow 
# /some/folder/with/content + /subfolder => /some/folder/with/content/subfolder

class <<ROOT
  def join(*args)
    super *args.map{|a| a.is_a?(String) && a[0] == ?/ ? a[1 .. a.size] : a }
  end

  def +(a)
    super(a.is_a?(String) && a[0] == ?/ ? a[1 .. a.size] : a)
  end
end

set :views, ROOT
set :public_folder, ROOT
set :app_file, $0

set :static, false

# only one parametr - port number
if ARGV.size > 0
  set :port, ARGV.first.to_i
end


# build array of contents and theris type for specified folder
def get_content(folder = nil)
  abs_path = folder ? ROOT + folder : ROOT
  
  # build array if pairs: [filename, :type, is_textfile]
  abs_path.entries.map do |obj|
    file_path = abs_path + obj
    [obj, 
      if file_path.file?;         :file
      elsif file_path.directory?; :dir
      elsif file_path.symlink?;   :link
      end,
      
      !!`file #{file_path.to_s}`.sub(file_path.to_s, '').index(/text/i)
    ]
  end
end

def view(tpl)
  (Pathname.new(__FILE__).dirname + "../views/#{tpl}.haml").read
end

include Search

# shows index.html or folder contents if index.html does not exists
get '/' do 
  if File.file?('./index.html')
    File.open('./index.html') {|f| f.read }
  elsif File.file?('./index.haml')
    haml view(:index)
  else
    @path = ''
    @files = get_content.select {|f| f[0] != '.' && f[0] != '..' }
    haml view(:listing)
  end
end

get '/__img_preview' do
  params[:file] = params[:file].gsub(' ', '\ ')
  tmppath = "/tmp/httpit_preview_#{Time.now.to_i}.jpeg"
  `convert #{ROOT + params[:file]} -resize 1024 -quality 100% #{tmppath}`
  content_type "image/jpeg"
  content = File.open(tmppath, 'rb') { |f| f.read }
  File.delete(tmppath)
  content
end

# shows folder contents
get %r{.+} do
  return nil if request.path == '/favicon.ico'
  @path = URI.unescape(request.path)
  
  abs_path = ROOT + @path
  
  if @path =~ /.+\.sass\.css/
    return halt(404) unless File.file?(abs_path.to_s.chomp('.css'))
    content_type :css
    sass @path.chomp('.sass.css').to_sym
    
  elsif !abs_path.file? && !abs_path.directory?
    halt 404

  elsif @path =~ /.+\.md/
    content_type :html
    return RedCloth.new(abs_path.read).to_html
    
  elsif @path =~ /.+\.haml/
    haml @path.chomp('.haml').to_sym
      
  elsif File.file?(abs_path)
    send_file(abs_path)
    
  else
    @files = get_content(@path)
    haml view(:listing)
  end
end

error 404 do
  @path = request.path
  haml view(:not_found)
end